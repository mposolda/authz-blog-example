STEP 1

- Rozbalit zbrusu novy "keycloak-demo"

- Github - checkout "step1" a otevrit v IDEA

- Zbuildit webapp a deploynout na pripraveny demo


STEP 2

- Prepare KC:
-- Create realm "jbug"
-- Create client "authz-blog"
-- Create realm role "user"
-- Create user "john" - Don't yet assign him to anything
-- Export keycloak.json and copy to apps
-- Security-constraint in web.xml
-- Add login link


STEP 3

- Create users "bill" and "tess", password "password" , Role "user"
- Enable "authorization" and "Remote management"
- Create scopes "create-blogpost" and "view-blogpost"
- Create resource "blog" a dat k nemu scope "create-blogpost"
- Policies "john-policy", "bill-policy", "tess-policy"
- Permission pro scope "create-blogpost" dat k "john-policy"
- Zkusit nejakou evaluation

App:
- pridat deny.html
- na strane keycloak.json pridat policy-enforcer
- Pridat Utils.getAuthzContext() a CreateServlet - enforcnout autorizaci


STEP 4

- Create resource "blogpost:foo:bill" ,
type: blogpost,
uri: blogpost:foo:bar ,
scopes: view-blogpost,

- Create policy: view-blogpost-policy s timhle textem:

{code}
var context = $evaluation.getContext();
var resource = $evaluation.getPermission().getResource();
var resourceName = resource.getName();

var identity = context.getIdentity();
var attributes = identity.getAttributes();
var username = attributes.getValue('preferred_username').asString(0);

if (resourceName.endsWith(username)) {
    $evaluation.grant();
} else {
    $evaluation.deny();
}
{code}

- Create view-blogpost-permission
-- AFFIRMATIVE
-- Policies: john-policy, viewblogpost-policy,
-- Scopes: view-blogpost
-- Resources: any resource
- Check v evaluation toolu, ze ma permission john a bill (pro resource "blogpost:foo:bill" )

App:
Pridat authzContext check ve ViewServletu u tech jednotlivych messages


STEP 5:

Zmeny jen na strane aplikace (use AuthzClient for dynamically create resources and checking them)

